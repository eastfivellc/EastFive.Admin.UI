@using EastFive;
@using EastFive.Extensions;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">EastFive.Admin.UI</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>
@if (!String.IsNullOrWhiteSpace(failureMessage))
{
    <p><code>@failureMessage</code></p>
}

@if (entryPoints == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <ul class="nav flex-column">
            @foreach (var endpoint in entryPoints.Where(ep => ep.Name.HasBlackSpace()))
            {
                var link = $"resource/{endpoint.Name}";
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="@link">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> @endpoint.Name
                    </NavLink>
                </li>
            }
        </ul>
    </div>
}

@code {
    private bool collapseNavMenu = true;
    private Api.Resources.Route[] endpoints = null;
    private Api.Resources.Route[] entryPoints = null;
    private string failureMessage;
    
    public static IDictionary<string, Api.Resources.Route> ManifestEndpoints { get; set; }

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        bool success = await await Comms.GetManifestAsync(localStorage,
            async endpoints =>
            {
                this.endpoints = endpoints;
                this.entryPoints = endpoints.Where(ep => ep.IsEntryPoint).ToArray();

                foreach (var ep in endpoints)
                {
                    Console.WriteLine($"DEFINITING ROUTE for `{ep.Name.ToLower()}`");
                    await localStorage.SetItemAsync(ep.Name.ToLower(), Newtonsoft.Json.JsonConvert.SerializeObject(ep));
                }
                return true;
            },
            (message) =>
            {
                this.failureMessage = message;
                return false.AsTask();
            });
    }
}
