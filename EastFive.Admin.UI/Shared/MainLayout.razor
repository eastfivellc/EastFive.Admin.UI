@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject DialogService dialogService
@using Radzen.Blazor
@using Radzen;
@using EastFive;
@using EastFive.Linq;
@using EastFive.Extensions;

<RadzenDialog />

@*<div class="sidebar">
        <NavMenu />
    </div>*@

<div class="main">
    <div class="top-row px-4">
        @if (Session.Sessions.AnyNullSafe())
        {
            <RadzenSplitButton class="navbar-brand" 
                               Click="@((args) => SelectSession(args))" 
                               Text="@Session.selectedSession.Value.title" 
                               Style="margin-bottom: 20px;">
                <ChildContent>
                    @foreach (var session in Session.Sessions)
                    {
                        <RadzenSplitButtonItem Text="@session.title" Value="@session.id.ToString("N")" />
                    }
                    <RadzenSplitButtonItem Text="New" Value="" />
                </ChildContent>
            </RadzenSplitButton>
        }
        else
        {
            <RadzenSplitButton class="navbar-brand"
                               Click="@((args) => SelectSession(args))"
                               Text="Add Session" Style="margin-bottom: 20px;">
            </RadzenSplitButton>
        }
    </div>

    <div>
        <RadzenMenu>
            <RadzenMenuItem Text="Authorization" Icon="vpn_key">
                <RadzenMenuItem Text="Sessions" Path="/Auth/Sessions" Icon="person_outline"></RadzenMenuItem>
                <RadzenMenuItem Text="Accounts" Path="/Auth/Accounts" Icon="group"></RadzenMenuItem>
                <RadzenMenuItem Text="Mappings" Path="/Auth/Mappings" Icon="fingerprint"></RadzenMenuItem>
            </RadzenMenuItem>
            <RadzenMenuItem Text="Development" Icon="code">
                <RadzenMenuItem Text="Documentation" Path="/Development/Documentation" Icon="menu_book"></RadzenMenuItem>
                <RadzenMenuItem Text=".NET" Path="/Development/DotNet" Icon="create"></RadzenMenuItem>
                <RadzenMenuItem Text="Blazor" Path="/Development/Blazor" Icon="create"></RadzenMenuItem>
                <RadzenMenuItem Text="GraphQL" Path="/Development/GraphQL" Icon="create"></RadzenMenuItem>
                <RadzenMenuItem Text="Type Script" Path="/Development/TypeScript" Icon="create"></RadzenMenuItem>
                <RadzenMenuItem Text="iOS" Path="/Development/iOS" Icon="create"></RadzenMenuItem>
            </RadzenMenuItem>
            <RadzenMenuItem Text="Functions" Icon="functions">
                <RadzenMenuItem Text="Invocations" Path="/Function/Invocations" Icon="settings"></RadzenMenuItem>
                <RadzenMenuItem Text="Information" Path="FunctionsCallTree" Icon="dashboard"></RadzenMenuItem>
                <RadzenMenuItem Text="Call Tree" Path="/Functions/CallTree" Icon="account_tree"></RadzenMenuItem>
            </RadzenMenuItem>
            <RadzenMenuItem Text="Reporting" Icon="show_chart">
            </RadzenMenuItem>
            <RadzenMenuItem Text="Storage" Icon="storage">
                <RadzenMenuItem Text="Backups" Path="/Storage/Backups" Icon="settings_backup_restore"></RadzenMenuItem>
                <RadzenMenuItem Text="Explorer" Path="/Storage/Explorer" Icon="list_alt"></RadzenMenuItem>
                <RadzenMenuItem Text="Information" Path="/Storage/Information" Icon="pie_chart"></RadzenMenuItem>
                <RadzenMenuItem Text="Health" Path="/Storage/Health" Icon="healing"></RadzenMenuItem>
            </RadzenMenuItem>
            <RadzenMenuItem Text="Systems" Icon="account_balance">
                <RadzenMenuItem Text="Redirect Urls" Path="RedirectUrls" Icon="arrow_forward"></RadzenMenuItem>
                <RadzenMenuItem Text="Configuration Settings" Path="ConfigurationSettings" Icon="settings"></RadzenMenuItem>
                <RadzenMenuItem Text="CORS"></RadzenMenuItem>
            </RadzenMenuItem>
            <RadzenMenuItem Text="Endpoints" Icon="developer_mode">
                @if (Server.selectedServer.HasValue)
                {
                    var endpoints = Server.selectedServer.Value.endpoints
                        .NullToEmpty()
                        .Where(ep => ep.Name.HasBlackSpace());
                    @foreach (var endpoint in endpoints)
                    {
                        var path = $"resource/{endpoint.Name}";
                        <RadzenMenuItem Text="@endpoint.Name" Path="path" Icon="create"></RadzenMenuItem>
                    }
                }
            </RadzenMenuItem>
        </RadzenMenu>
    </div>

    <div class="content px-4">
        @Body
    </div>
</div>

@code {
    private string token = "";
    private string serverUrl = "";
    private string tableToken = "";

    private const string AddServerValue = "addServer";
    private const string ManuallySpecifyValue = "manual";

    public static DialogOptions dialogOptions =
        new DialogOptions()
        {
            Width = "calc(100% - 200px)",
            Height = "calc(100% - 200px)",
            Left = "calc(100px)",
            Top = "calc(100px)"
        };

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Server.OnInitializedAsync(localStorage);
        await Session.OnInitializedAsync(localStorage);
        dialogService.OnClose += (args) =>
            {
                StateHasChanged();
            };
        await Components.Login.ProcessRedirectAsync(NavigationManager, localStorage, dialogService);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!Session.selectedSession.HasValue)
        {
            if (!Session.Sessions.AnyNullSafe())
            {
                CreateSession();
                return;
            }
            Session.selectedSession = Session.Sessions.First();
        }
    }

    private void CreateSession()
    {
        var sessionId = Session.selectedSession.HasValue ? Session.selectedSession.Value.id : default(Guid?);
        dialogService.Open<EastFive.Admin.UI.Pages.SessionCreation>($"Session Creation",
        new Dictionary<string, object>()
        {
                {
                    "SessionId",
                    sessionId
                },
        },
        dialogOptions);
    }

    private async void SelectSession(RadzenSplitButtonItem item)
    {
        if (item != null)
        {
            if (Guid.TryParse(item.Value, out Guid sessionId))
            {
                var newSelectedSession = Session.Sessions
                    .Where(serverSessionKvp => serverSessionKvp.id == sessionId)
                    .First();
                await Session.SelectSessionAsync(newSelectedSession, localStorage);
                return;
            }

            dialogService.Open<EastFive.Admin.UI.Pages.SessionCreation>($"New Session",
                new Dictionary<string, object>()
                {
                    { "SessionId", default(Guid?)   }
                },
                dialogOptions);
            return;
        }

        dialogService.Open<EastFive.Admin.UI.Pages.SessionCreation>($"Edit Session",
            new Dictionary<string, object>()
            {
                { 
                    "SessionId",
                    Session.selectedSession.HasValue? 
                        Session.selectedSession.Value.id
                        :
                        default(Guid?)
                }
            },
            dialogOptions);
    }
}
