@page "/AzureStorageTables"
@inject HttpClient Http
@using SharpDom.Tags
@using System.IO
@using EastFive.Api.Resources;
@using System.Threading;
@using EastFive;
@using EastFive.Linq;
@using EastFive.Extensions;
@using EastFive.Collections.Generic;
@using EastFive.Admin.UI.Components;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Radzen.Blazor
@using Radzen;
@using Newtonsoft.Json.Linq
@using EastFive.Azure.Storage;
@*@inject NotificationService notificationService*@

    <div class="row">
        <div class="col-md-10">
            <RadzenDropDown AllowClear="true"
                            TValue="StorageTable"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowFiltering="true"
                            Placeholder="@(tables.AnyNullSafe()? "Select..." : "Loading...")"
                            Data="@tables"
                            @bind-Value="@table"
                            Style="margin-bottom: 20px">
                <Template Context="prop">
                    @((prop as StorageTable).name)
                </Template>
            </RadzenDropDown>

        </div>
        <div class="col-md-2">
            <RadzenButton ButtonType="ButtonType.Submit"
                          Icon="youtube_searched_for" 
                          Text="Fetch Table Rows"
                          Click="FetchTableRowsAsync"/>
        </div>
    </div>
@if (!table.IsDefaultOrNull())
{
<RadzenGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true"
            Data="@tableRows.NullToEmpty()"
            TItem="StorageRow">
    <Columns>
        <RadzenGridColumn TItem="StorageRow" Property="rowKey" Title="Row Key">
            <Template Context="prop">
                <span>@prop.rowKey</span>
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="StorageRow" Property="partitionKey" Title="Partition">
            <Template Context="prop">
                <span>@prop.partitionKey</span>
            </Template>
        </RadzenGridColumn>
        @foreach (var property in @table.properties)
        {
            <RadzenGridColumn TItem="StorageRow" Property="@property.name" Title="@property.name">
                <Template Context="prop">
                    @{
                        Console.WriteLine($"{property.name} - {prop.properties.SelectKeys().Join(", ")}");
                    }
                    @if (prop.properties.ContainsKey(property.name))
                    {
                        var value = prop.properties[property.name];
                        if (value == null)
                        {
                            @("null")
                        }
                        else if (typeof(Guid).IsAssignableFrom(value.GetType()))
                        {
                            var guidValue = (Guid)value;

                            @guidValue.ToString()
                        }
                        else if (typeof(string).IsAssignableFrom(value.GetType()))
                        {
                            var strValue = (string)value;

                            @strValue
                        }
                        else if (value.GetType().IsArray)
                        {
                            var arrValue = (value as object[]);
                            <ul>
                                @foreach (var arrV in arrValue)
                                {
                                    <li>@arrV</li>
                                }
                            </ul>
                        } else
                        {
                            @value.GetType().FullName
                        }
                    }
                    else
                    {
                        @("--")
                    }
                </Template>
            </RadzenGridColumn>
        }
    </Columns>
</RadzenGrid>
    
}

@code {

    Azure.Storage.StorageTable table;

    private Azure.Storage.StorageTable[] tables = new StorageTable[] { };

    private StorageRow[] tableRows = new StorageRow[] { };

    private Dictionary<string, string> paramValues = new Dictionary<string, string>();

    private async void FetchTableRowsAsync()
    {
        this.tableRows = await Comms.GetAsync("StorageTable", "List",
            new Dictionary<string, string>()
            {
                { "name", table.name }
            },
            Session.selectedSession.Value,
            (StorageRow[] tableRows) =>
            {
                return tableRows;
            });
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!Session.selectedSession.HasValue)
            return;
        this.tables = await Comms.GetAsync("StorageTable", "All",
            new Dictionary<string, string>() { },
            Session.selectedSession.Value,
            (StorageTable[] tables) => tables);
    }

}
